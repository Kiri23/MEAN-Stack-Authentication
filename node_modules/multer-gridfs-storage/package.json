{
  "_args": [
    [
      {
        "raw": "multer-gridfs-storage@https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
        "scope": null,
        "escapedName": "multer-gridfs-storage",
        "name": "multer-gridfs-storage",
        "rawSpec": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
        "spec": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
        "type": "remote"
      },
      "C:\\Users\\Yadira\\Desktop\\MEAN-Stack-Authentication-master"
    ]
  ],
  "_from": "multer-gridfs-storage@latest",
  "_id": "multer-gridfs-storage@1.2.2",
  "_inCache": true,
  "_location": "/multer-gridfs-storage",
  "_phantomChildren": {},
  "_requested": {
    "raw": "multer-gridfs-storage@https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
    "scope": null,
    "escapedName": "multer-gridfs-storage",
    "name": "multer-gridfs-storage",
    "rawSpec": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
    "spec": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
  "_shasum": "b2bc1a7cb68a13033cf87eb4be392e13734f0694",
  "_shrinkwrap": null,
  "_spec": "multer-gridfs-storage@https://registry.npmjs.org/multer-gridfs-storage/-/multer-gridfs-storage-1.2.2.tgz",
  "_where": "C:\\Users\\Yadira\\Desktop\\MEAN-Stack-Authentication-master",
  "author": {
    "name": "devconcept",
    "email": "devconcept@outlook.com"
  },
  "bugs": {
    "url": "https://github.com/devconcept/multer-gridfs-storage/issues"
  },
  "dependencies": {
    "gridfs-stream": "^1.1.1",
    "mongodb": "^2.1.19"
  },
  "description": "Multer storage engine for GridFS",
  "devDependencies": {
    "babel-polyfill": "^6.23.0",
    "babel-preset-env": "^1.4.0",
    "babel-register": "^6.24.1",
    "bluebird": "^3.5.0",
    "chai": "^3.5.0",
    "chai-interface": "^2.0.3",
    "coveralls": "^2.11.9",
    "eslint": "^2.10.2",
    "express": "^4.15.2",
    "istanbul": "^0.4.3",
    "jsdoc": "^3.4.3",
    "md5-file": "^2.0.4",
    "mocha": "^2.4.5",
    "mocha-lcov-reporter": "^1.2.0",
    "multer": "^1.3.0",
    "mute": "^2.0.6",
    "sinon": "^2.2.0",
    "sinon-chai": "^2.10.0",
    "supertest": "^1.2.0"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "LICENSE",
    "CHANGELOG.md",
    "README.md",
    "index.js",
    "lib/"
  ],
  "homepage": "https://github.com/devconcept/multer-gridfs-storage",
  "keywords": [
    "multer",
    "mongodb",
    "storage",
    "gridfs"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "multer-gridfs-storage",
  "optionalDependencies": {},
  "readme": "# Multer's GridFS storage engine\r\n\r\n[![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] ![Npm version][version-image] ![Downloads][downloads-image]\r\n\r\n\r\n[GridFS](https://docs.mongodb.com/manual/core/gridfs) storage engine for [Multer](https://github.com/expressjs/multer) to store uploaded files directly to MongoDb\r\n\r\n## Installation\r\n\r\nUsing npm\r\n\r\n```sh\r\n$ npm install multer-gridfs-storage --save\r\n```\r\n\r\nBasic usage example:\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar multer  = require('multer');\r\n// Create a storage object with a given configuration\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database'\r\n});\r\n// Set multer storage engine to the newly created object\r\nvar upload = multer({ storage: storage });\r\n\r\nvar app = express()\r\n\r\n// Upload your files as usual\r\nvar sUpload = upload.single('avatar');\r\napp.post('/profile', sUpload, function (req, res, next) { \r\n    /*....*/ \r\n})\r\n\r\nvar arrUpload = upload.array('photos', 12);\r\napp.post('/photos/upload', arrUpload, function (req, res, next) {\r\n    /*....*/ \r\n})\r\n\r\nvar fUpload = upload.fields([{ name: 'avatar', maxCount: 1 }, { name: 'gallery', maxCount: 8 }])\r\napp.post('/cool-profile', fUpload, function (req, res, next) {\r\n    /*....*/ \r\n})\r\n```\r\n\r\n## API\r\n\r\n### module(options) : function\r\n\r\nThe module returns a function that can be invoked with options to create a Multer storage engine.\r\n\r\nStarting from version 1.1.0 the module function can be called with \r\nor without the javascript `new` operator.\r\n\r\nThe 1.2 version brings full support for promises and ES6 generators. \r\nYou can check the [wiki][wiki] for more information.\r\n\r\n### Options\r\n\r\nThe options parameter is an object with the following properties.\r\n\r\n#### url\r\n\r\nType: `string`\r\n\r\nRequired if [`gfs`][gfs-option] option is not present\r\n\r\nThe mongodb connection uri. \r\n\r\nA string pointing to the database used to store the incoming files. This must be a standard mongodb [connection string](https://docs.mongodb.com/manual/reference/connection-string).\r\n\r\nWith this option the module will create a GridFS stream instance for you instead. \r\n\r\nNote: If the [`gfs`][gfs-option] option is specified this setting is ignored.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n    url: 'mongodb://localhost:27017/database'\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nCreating the connection string from a host, port and database object\r\n\r\n```javascript\r\nvar url = require('url');\r\n\r\nvar settings = {\r\n    host: '127.0.0.1',\r\n    port: 27017,\r\n    database: 'database'\r\n};\r\n\r\nvar connectionString = url.format({\r\n    protocol: 'mongodb',\r\n    slashes: true,\r\n    hostname: settings.host,\r\n    port: settings.port,\r\n    pathname: settings.database\r\n});\r\n\r\nvar storage = require('multer-gridfs-storage')({\r\n    url: connectionString\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\n#### gfs\r\n\r\nType: `object` or `Promise`\r\n\r\nRequired if [`url`][url-option] option is not present\r\n\r\nThe [gridfs-stream](https://github.com/aheckmann/gridfs-stream/) instance to use or a promise that resolves with the instance.\r\n\r\nIf this option is provided, files are stored using this stream. This is useful when you have an existing GridFS object and want to reuse it to upload your files.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar Grid = require('gridfs-stream');\r\nvar mongo = require('mongodb');\r\nvar GridFSStorage = require('multer-gridfs-storage');\r\n\r\nvar db = new mongo.Db('database', new mongo.Server(\"127.0.0.1\", 27017));\r\n\r\ndb.open(function (err) {\r\n  if (err) return handleError(err);\r\n  var gfs = Grid(db, mongo);\r\n\r\n  var storage = GridFSStorage({\r\n     gfs: gfs\r\n  });\r\n  var upload = multer({ storage: storage });\r\n})\r\n```\r\n\r\n#### filename\r\n\r\nType: `function` or `function*`\r\n\r\nNot required\r\n\r\nA function to control the file naming in the database. Is invoked with\r\nthe parameters `req`, `file` and `callback`, in that order, like all the Multer configuration\r\nfunctions.\r\n\r\nBy default, this module behaves exactly like the default Multer disk storage does.\r\nIt generates a 16 bytes long name in hexadecimal format with no extension for the file\r\nto guarantee that there are very low probabilities of naming collisions. You can override this \r\nby passing your own function.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   filename: function(req, file, cb) {\r\n      cb(null, file.originalname);\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nIn this example the original filename and extension in the user's computer are used \r\nto name each of the uploaded files. Please note that this will not guarantee that file\r\nnames are unique and you might have files with duplicate names in your database.\r\n\r\n```javascript\r\nvar crypto = require('crypto');\r\nvar path = require('path');\r\n\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   filename: function(req, file, cb) {\r\n       crypto.randomBytes(16, function (err, raw) {\r\n           cb(err, err ? undefined : raw.toString('hex') + path.extname(file.originalname));\r\n       });\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nTo ensure that names are unique a random name is used and the file extension is preserved as well. \r\nYou could also use the user's file name plus a timestamp to generate unique names.\r\n\r\n#### identifier\r\n\r\nType: `function` or `function*`\r\n\r\nNot required\r\n\r\nA function to control the unique identifier of the file. \r\n\r\nThis function is invoked as all the others with the `req`, `file` and `callback` \r\nparameters and can be used to change the default identifier ( the `_id` property)\r\ncreated by MongoDb. You must guarantee that this value is unique \r\notherwise you will get an error.\r\n\r\nPlease note that the identifiers must conform to the MongoDb spec for ObjectID, that is, a 24 bytes hex string, 12 byte binary string or a Number.\r\n\r\nTo use the default generated identifier invoke the callback with a [falsey](http://james.padolsey.com/javascript/truthy-falsey/) value like `null` or `undefined`.  \r\n\r\nExample:\r\n\r\n```javascript\r\nvar path = require('path');\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   identifier: function(req, file, cb) {\r\n      cb(null, Math.floor(Math.random() * 1000000));\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nIn this example a random number is used for the file identifier. \r\n\r\n***Note:***\r\n\r\n> Normally you shouldn't use this function\r\nunless you want granular control of your file ids because auto-generated identifiers are guaranteed to be unique.\r\n\r\n#### metadata\r\n\r\nType: `function` or `function*`\r\n\r\nNot required\r\n\r\nA function to control the metadata object associated to the file. \r\n\r\nThis function is called with the `req`, `file` and `callback` parameters and is used\r\nto store metadata with the file. \r\n\r\nBy default, the stored metadata value for uploaded files is `null`.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   metadata: function(req, file, cb) {\r\n      cb(null, req.body);\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nIn this example the contents of the request body are stored with the file. \r\nThis is only for illustrative purposes. If your users send passwords or other sensitive data in the request \r\nthose will be stored unencrypted in the database as well, inside the metadata of the file.\r\n\r\n#### chunkSize\r\n\r\nType: `number`, `function` or `function*`\r\n\r\nNot required\r\n\r\nThe preferred size of file chunks in bytes. \r\n\r\nDefault value is 261120 (255kb). \r\n\r\nYou can use a fixed number as the value or a function to use different values per upload.\r\n\r\nExample using fixed value:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   chunkSize: 2048\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nExample using dynamic value:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   chunkSize: function(req, file, cb) {\r\n       if (file.originalname === 'myphoto.jpg') {\r\n           cb(null, 12345);\r\n       } else {\r\n           cb(null, 261120);\r\n       }\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\n#### root\r\n\r\nType: `string`, `function` or `function*`\r\n\r\nNot required\r\n\r\nThe root collection to store the files. By default, this value is `null`.\r\nWhen the value of this property is `null` MongoDb will use the default collection name `'fs'`\r\nto store files. This value can be changed with this option and you can use a different fixed value\r\nor a dynamic one per file.\r\n\r\nExample using a fixed value:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   root: 'myfiles'\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nLater on you can query the GridFS collection using\r\n\r\n```javascript\r\ndb.collection('myfiles.files')//...\r\ndb.collection('myfiles.chunks')//...\r\n```\r\n\r\nExample using a dynamic value:\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   root: function(req, file, cb) {\r\n       if (file.fieldname = 'plants') {\r\n           cb(null, 'plants');\r\n       } else {\r\n           cb(null, 'animals')\r\n       }\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nThis will create two collections of files for animals and plants based on the fieldname used to upload the file.\r\n\r\n### File information\r\n\r\nEach file in `req.file` and `req.files` contain the following properties in addition\r\nto the ones that Multer create by default.\r\n\r\nKey | Description\r\n--- | -----------\r\n`filename` | The name of the file within the database\r\n`metadata` | The stored metadata of the file\r\n`id` | The id of the stored file\r\n`grid` | The GridFS information of the stored file\r\n`size` | The size of the stored file\r\n\r\nTo see all the other properties of the file object check the Multer's [documentation](https://github.com/expressjs/multer#file-information).\r\n\r\n### Events\r\n\r\nEach storage object is also a standard Node.js Event Emitter. This is \r\ndone to ensure that some internal events can also be handled in user code.\r\n\r\n#### Event: `'connection'`\r\n\r\n> Only available when the storage is created with the [`url`][url-option] option.\r\n\r\nThis event is emitted when the MongoDb connection is opened.\r\n\r\n*Event arguments*\r\n\r\n - gfs: The newly created GridFS instance \r\n - db: The native MongoDb database object.\r\n\r\nThis event is only triggered once. Note that if you only want to log events there is an api option for that\r\n\r\n#### Event: `'file'`\r\n\r\nThis event is emitted every time a new file is stored in the db. \r\n\r\n*Event arguments*\r\n\r\n - file: The uploaded file \r\n\r\n\r\n#### Event: `'error'`\r\n\r\nThis event is emitted when there is an error streaming the file to the database.\r\n\r\n*Event arguments*\r\n\r\n - error: The streaming error\r\n - config: The failed upload configuration\r\n \r\n#### Event: `'dbError'`\r\n \r\nThis event is emitted when there underlying connection emits an error.\r\n \r\n > Only available when the storage is created with the [`url`][url-option] option.\r\n \r\n*Event arguments*\r\n \r\n - error: The error emitted by the database connection\r\n\r\n## Debugging\r\n\r\nTo make debugging easy you can use any of the logging options in the storage constructor. \r\n\r\n### log\r\n\r\nType: `boolean` or `function`\r\n\r\nDefault: `false`\r\n\r\nNot required\r\n\r\nEnable or disable logging.\r\n\r\nBy default, the module will not output anything. Set this option to `true` to log when the connection is opened,\r\nfiles are stored or an error occurs. This is useful when you want to see logging about incoming files.\r\n\r\nIf a function is provided it will be called in every log event with two arguments `err` y `log` with the error or\r\nthe message respectively. \r\n\r\nThe `log` object contains two properties `message` and `extra` corresponding to the\r\nevent that triggered the log and any additional info, e.g. the uploaded file\r\n\r\n```javascript\r\nvar storage = require('multer-gridfs-storage')({\r\n   url: 'mongodb://localhost:27017/database',\r\n   log: function(err, log) {\r\n      if (err) {\r\n        console.error(err);\r\n      } else {\r\n        console.log(log.message, log.extra);\r\n      }\r\n   }\r\n});\r\nvar upload = multer({ storage: storage });\r\n```\r\n\r\nSee [`logLevel`][logLevel-option] for more information on how logging behaves on different options.\r\n\r\nThe console is used to log information to `stdout` or `stderr`\r\n\r\n### logLevel\r\n\r\nNot required\r\n\r\nThe events to be logged out. Only applies if logging is enabled.\r\n\r\nType: `string`\r\n\r\nDefault: `'file'`\r\n\r\nPossible values: `'all'` or `'file'`\r\n\r\nIf set to `'all'` and the connection is established using the [`url`][url-option] option \r\nsome events are attached to the MongoDb connection to output to `stdout` and `stderr`\r\nwhen the connection is established and files are uploaded.\r\n\r\nIf set to `'file'` only successful file uploads will be registered. This setting applies to\r\nboth the `gfs` and the `url` configuration.\r\n\r\nThis option is useful when you also want to log when the connection is opened\r\nor an error has occurs. Setting it to `'all'` and using the [`gfs`][gfs-option] option\r\nhas no effect and behaves like if it were set to `'file'`.\r\n\r\n## Test\r\n\r\nTo run the test suite, first install the dependencies, then run `npm test`:\r\n\r\n```bash\r\n$ npm install\r\n$ npm test\r\n```\r\n\r\nTests are written with [mocha](https://mochajs.org/) and [chai](http://chaijs.com/). You can also run the tests with:\r\n\r\nCode coverage thanks to [istanbul](https://github.com/gotwarlost/istanbul)\r\n\r\n```bash\r\n$ npm coverage\r\n```\r\n\r\n## License\r\n\r\n[MIT](https://github.com/devconcept/multer-gridfs-storage/blob/master/LICENSE)\r\n\r\n[travis-url]: https://travis-ci.org/devconcept/multer-gridfs-storage\r\n[travis-image]: https://travis-ci.org/devconcept/multer-gridfs-storage.svg?branch=master \"Build status\"\r\n[coveralls-url]: https://coveralls.io/github/devconcept/multer-gridfs-storage?branch=master\r\n[coveralls-image]: https://coveralls.io/repos/github/devconcept/multer-gridfs-storage/badge.svg?branch=master \"Coverage report\"\r\n[version-image]:https://img.shields.io/npm/v/multer-gridfs-storage.svg \"Npm version\"\r\n[downloads-image]: https://img.shields.io/npm/dm/multer-gridfs-storage.svg \"Monthly downloads\"\r\n\r\n[url-option]: #url\r\n[gfs-option]: #gfs\r\n[filename-option]: #filename\r\n[identifier-option]: #identifier\r\n[metadata-option]: #metadata\r\n[chunkSize-option]: #chunkSize\r\n[root-option]: #root\r\n[log-option]: #log\r\n[logLevel-option]: #loglevel\r\n[wiki]: https://github.com/devconcept/multer-gridfs-storage/wiki\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/devconcept/multer-gridfs-storage.git"
  },
  "scripts": {
    "cover": "istanbul cover ./node_modules/mocha/bin/_mocha",
    "coveralls": "npm run cover -- --report lcovonly && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "docs": "jsdoc -c ./conf.json --readme ./README.md",
    "lint": "eslint .",
    "test": "mocha --require babel-register --require babel-polyfill"
  },
  "version": "1.2.2"
}
