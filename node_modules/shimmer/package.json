{
  "_args": [
    [
      {
        "raw": "shimmer@https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
        "scope": null,
        "escapedName": "shimmer",
        "name": "shimmer",
        "rawSpec": "https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
        "spec": "https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
        "type": "remote"
      },
      "C:\\Users\\Yadira\\Desktop\\MEAN-Stack-Authentication-master"
    ]
  ],
  "_from": "shimmer@>=1.0.0 <2.0.0",
  "_id": "shimmer@1.1.0",
  "_inCache": true,
  "_location": "/shimmer",
  "_phantomChildren": {},
  "_requested": {
    "raw": "shimmer@https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
    "scope": null,
    "escapedName": "shimmer",
    "name": "shimmer",
    "rawSpec": "https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
    "spec": "https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/async-listener",
    "/vxx"
  ],
  "_resolved": "https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
  "_shasum": "97d7377137ffbbab425522e429fe0aa89a488b35",
  "_shrinkwrap": null,
  "_spec": "shimmer@https://registry.npmjs.org/shimmer/-/shimmer-1.1.0.tgz",
  "_where": "C:\\Users\\Yadira\\Desktop\\MEAN-Stack-Authentication-master",
  "author": {
    "name": "Forrest L Norvell",
    "email": "ogd@aoaioxxysz.net"
  },
  "bugs": {
    "url": "https://github.com/othiym23/shimmer/issues"
  },
  "dependencies": {},
  "description": "Safe(r) monkeypatching for JavaScript.",
  "devDependencies": {
    "sinon": "^1.17.2",
    "standard": "^5.3.1",
    "tap": "^2.2.0"
  },
  "homepage": "https://github.com/othiym23/shimmer#readme",
  "keywords": [
    "monkeypatch",
    "swizzle",
    "wrapping",
    "danger",
    "hmm",
    "shim"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "name": "shimmer",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/othiym23/shimmer.svg)](https://travis-ci.org/othiym23/shimmer)\n[![Coverage Status](https://coveralls.io/repos/othiym23/shimmer/badge.svg?branch=master)](https://coveralls.io/r/othiym23/shimmer?branch=master)\n\n## Safer monkeypatching for Node.js\n\n`shimmer` does a bunch of the work necessary to wrap other methods in\na wrapper you provide:\n\n```javascript\nvar http = require('http');\nvar shimmer = require('shimmer');\n\nshimmer.wrap(http, 'request', function (original) {\n  return function () {\n    console.log(\"Starting request!\");\n    var returned = original.apply(this, arguments)\n    console.log(\"Done setting up request -- OH YEAH!\");\n    return returned;\n  };\n});\n```\n\n### Mandatory disclaimer\n\nThere are times when it's necessary to monkeypatch default behavior in\nJavaScript and Node. However, changing the behavior of the runtime on the fly\nis rarely a good idea, and you should be using this module because you need to,\nnot because it seems like fun.\n\n### API\n\nAll monkeypatched functions have an attribute, `__wrapped`, set to true on\nthem.\n\n#### shimmer(options)\n\nIf you pass in an options object containing a function labeled `logger`,\n`shimmer` will use it instead of the logger, which defaults to `console.error`.\n`shimmer` is built to be as unobtrusive as possible and has no need to run\nasynchronously, so it defaults to logging when things fail, instead of\nthrowing.\n\n#### shimmer.wrap(nodule, name, wrapper)\n\n`shimmer` monkeypatches in place, so it expects to be passed an object.\nIt accepts either instances, prototypes, or the results of calling\n`require`. `name` must be the string key for the field's name on the\nobject.\n\n`wrapper` is a function that takes a single parameter, which is the original\nfunction to be monkeypatched. `shimmer` assumes that you're adding behavior\nto the original method, and not replacing it outright. If you *are* replacing\nthe original function, feel free to ignore the passed-in function.\n\nIf you *aren't* discarding the original, remember these tips:\n\n* call the original with something like `original.apply(this, arguments)`,\n  unless your reason for monkeypatching is to transform the arguments.\n* always capture and return the return value coming from the original function.\n  Today's null-returning callback is tomorrow's error-code returning callback.\n* Don't make an asynchronous function synchronous and vice versa.\n\n#### shimmer.massWrap(nodules, names, wrapper)\n\nJust like `wrap`, with the addition that you can wrap multiple methods on\nmultiple modules. Note that this function expects the list of functions to be\nmonkeypatched on all of the modules to be the same.\n\n#### shimmer.unwrap(nodule, name)\n\nA convenience function for restoring the function back the way it was before\nyou started. Won't unwrap if somebody else has monkeypatched the function after\nyou (but will log in that case). Won't throw if you try to double-unwrap a\nfunction (but will log).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/othiym23/shimmer.git"
  },
  "scripts": {
    "test": "standard && tap test/*.tap.js --coverage"
  },
  "version": "1.1.0"
}
